/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Client
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class game_event : TBase
  {
    private List<event_move> _moves;
    private List<string> _messages;

    public List<event_move> Moves
    {
      get
      {
        return _moves;
      }
      set
      {
        __isset.moves = true;
        this._moves = value;
      }
    }

    public List<string> Messages
    {
      get
      {
        return _messages;
      }
      set
      {
        __isset.messages = true;
        this._messages = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool moves;
      public bool messages;
    }

    public game_event() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Moves = new List<event_move>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    event_move _elem2;
                    _elem2 = new event_move();
                    _elem2.Read(iprot);
                    Moves.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Messages = new List<string>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    string _elem5;
                    _elem5 = iprot.ReadString();
                    Messages.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("game_event");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Moves != null && __isset.moves) {
          field.Name = "moves";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Moves.Count));
            foreach (event_move _iter6 in Moves)
            {
              _iter6.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Messages != null && __isset.messages) {
          field.Name = "messages";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Messages.Count));
            foreach (string _iter7 in Messages)
            {
              oprot.WriteString(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("game_event(");
      bool __first = true;
      if (Moves != null && __isset.moves) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Moves: ");
        __sb.Append(Moves);
      }
      if (Messages != null && __isset.messages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Messages: ");
        __sb.Append(Messages);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
